@page "/"
@using VisualLogger.Sources
@using VisualLogger.Streams
@implements IDisposable
@inject Scenario Scenario

<RadzenSplitter Orientation="Orientation.Vertical" Collapse=@OnCollapse Expand=@OnExpand style="height: 100%; border: 1px solid rgba(0,0,0,.08);">
    <RadzenSplitterPane>
        <RadzenSplitter Collapse=@OnCollapse Expand=@OnExpand>
            <RadzenSplitterPane Collapsible="false" Size="200px" Max="200px">
                <div style="overflow-y:auto; overflow-x:hidden; width: 100%">
                    <RadzenCard Style="width: 100%;">
                        <RadzenCheckBoxList TValue="int" Orientation="Orientation.Vertical">
                            <Items>
                                @for (int i = 0; i < Scenario.LoadedLogFiles.Length; i++)
                                {
                                    var fileName = Path.GetFileNameWithoutExtension(Scenario.LoadedLogFiles[i]);
                                    <RadzenCheckBoxListItem Text=@fileName Value=@i />
                                }
                            </Items>
                        </RadzenCheckBoxList>
                    </RadzenCard>
                </div>
            </RadzenSplitterPane>
            <RadzenSplitterPane Collapsible="false">
                <RadzenAutoComplete FilterDelay="100" Data=@strings Change=@(args => OnChange(args, "AutoComplete")) Style="width: 100%;" />
             
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
</RadzenSplitter>


@code {
    IEnumerable<LogRow>? data;
    IEnumerable<string> strings = Enumerable.Range(0, 10000).Select(x => x.ToString());
    int count;
    bool isLoading;
    string text = "";
    void OnChange(object value, string name)
    {
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Scenario.PropertyChanged += Scenario_PropertyChanged;
    }

    public void Dispose()
    {
        Scenario.PropertyChanged -= Scenario_PropertyChanged;
    }
    void Scenario_PropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    async Task LoadData(LoadDataArgs args)
    {
        if (Scenario.LogSource == null)
        {
            return;
        }
        isLoading = true;

        data = Scenario.LogSource.GetRows(args.Skip ?? 0,args.Top ?? 0);
        count = Scenario.LogSource.TotalRowsCount;
        isLoading = false;
    }
    void OnCollapse(RadzenSplitterEventArgs args)
    {
    }

    void OnExpand(RadzenSplitterEventArgs args)
    {
    }

    void OnResize(RadzenSplitterResizeEventArgs args)
    {
    }

    void OnCollapseDisabled(RadzenSplitterEventArgs args)
    {
    }

    void OnResizeDisabled(RadzenSplitterResizeEventArgs args)
    {
    }

}