@inherits LayoutComponentBase
@inject Scenario Scenario
@inject IScenarioOptions ScenarioOptions
@inject NavigationManager NavigationManager
@inject MenuSideBarService MenuSideBarService
@inject MenuTopBarService MenuTopBarService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ContextMenuService ContextMenuService

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<RadzenLayout>
    <RadzenHeader>
        <ChildContent>
            <div class="row justify-content-start align-items-center">
                <div class="col-5 d-flex align-items-center">
                    <RadzenSidebarToggle ContextMenu=@(args => ShowContextMenuWithContent(args)) ButtonStyle="ButtonStyle.Secondary"
                                         Click="@(args => { sidebarExpanded = !sidebarExpanded; bodyExpanded = !bodyExpanded; })">
                    </RadzenSidebarToggle>
                    <RadzenLabel Text="Visual Logger">
                    </RadzenLabel>
                    <RadzenLabel Text=" | ">
                    </RadzenLabel>
                    <RadzenLabel Text="V.0.1.0 beta">
                    </RadzenLabel>
                </div>
                <div class="col-7 d-flex align-items-center justify-content-end">
                    <a href="https://github.com/jim-jiang-github/VisualLogger.Shared" title="GitHub" target="_blank" class="mx-3">
                        <svg width="24" height="24" viewBox="0 0 512 499.36" xmlns="http://www.w3.org/2000/svg">
                            <title>GitHub</title>
                            <path fill="black" fill-rule="evenodd" d="M256 0C114.64 0 0 114.61 0 256c0 113.09 73.34 209 175.08 242.9 12.8 2.35 17.47-5.56 17.47-12.34 0-6.08-.22-22.18-.35-43.54-71.2 15.49-86.2-34.34-86.2-34.34-11.64-29.57-28.42-37.45-28.42-37.45-23.27-15.84 1.73-15.55 1.73-15.55 25.69 1.81 39.21 26.38 39.21 26.38 22.84 39.12 59.92 27.82 74.5 21.27 2.33-16.54 8.94-27.82 16.25-34.22-56.84-6.43-116.6-28.43-116.6-126.49 0-27.95 10-50.8 26.35-68.69-2.63-6.48-11.42-32.5 2.51-67.75 0 0 21.49-6.88 70.4 26.24a242.65 242.65 0 0 1 128.18 0c48.87-33.13 70.33-26.24 70.33-26.24 14 35.25 5.18 61.27 2.55 67.75 16.41 17.9 26.31 40.75 26.31 68.69 0 98.35-59.85 120-116.88 126.32 9.19 7.9 17.38 23.53 17.38 47.41 0 34.22-.31 61.83-.31 70.23 0 6.85 4.61 14.81 17.6 12.31C438.72 464.97 512 369.08 512 256.02 512 114.62 397.37 0 256 0z"></path>
                        </svg>
                    </a>
                </div>
            </div>
        </ChildContent>
    </RadzenHeader>
    <RadzenBody @bind-Expanded="@bodyExpanded">
        <ChildContent>
            @Body
        </ChildContent>
    </RadzenBody>
    <RadzenSidebar @bind-Expanded="@sidebarExpanded" class="demos-sidebar">
        <ChildContent>
            <RadzenPanelMenu Match="NavLinkMatch.Prefix">
                @foreach (var menu in MenuSideBarService.MenuItems)
                {
                    <SidebarMenuItem SidebarMenu=@menu />
                }
            </RadzenPanelMenu>
        </ChildContent>
    </RadzenSidebar>
</RadzenLayout>

@code {
    bool sidebarExpanded = true;
    bool bodyExpanded = false;

    protected override void OnInitialized()
    {
        //TODO Can not inject 'NotificationService' code behind for radzen, this may be a bug???
        MessageCenter.NotificationSuccess += (title, message) =>
    {
        NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Success,
                    Summary = title,
                    Detail = message,
                    Duration = 4000
                });
    };
        //TODO Can not inject 'DialogService' code behind for radzen, this may be a bug???
        ScenarioOptions.ScenarioDialog += () =>
        {
    return DialogService.OpenAsync<ScenarioOptionsPage>($"Order ",
        new Dictionary<string, object>() { { "OrderID", 1 } },
        new DialogOptions() { Width = "700px", Height = "570px" });
        };
        System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
        Scenario.Init();
    }
    void ShowContextMenuWithContent(MouseEventArgs args)
    {
        ContextMenuService.Open(args, ds =>
    @<RadzenMenu>
        @foreach (var item in MenuTopBarService.GetMenuItems())
        {
            @LoadMenuItem(item)
        }
    </RadzenMenu>
     );
    }
    void OnMenuItemClick(MenuItemEventArgs args)
    {
        if (args.Value is MenuTopBarItem menuTopBarItem)
        {
            if (menuTopBarItem.MenuItems == null)
            {
                menuTopBarItem.OnClick();
                ContextMenuService.Close();
            }
        }
    }
    void ChangeTheme(object value)
    {
        var url = NavigationManager.GetUriWithQueryParameter("theme", $"{value}");
        NavigationManager.NavigateTo(url, true);
    }

    private RenderFragment LoadMenuItem(MenuTopBarItem menuItem)
    {
        if (menuItem.MenuItems != null)
        {
            return
    @<RadzenMenuItem Text=@menuItem.Title Value=@menuItem Click=@OnMenuItemClick>
        @foreach (var item in menuItem.MenuItems)
        {
            @LoadMenuItem(item)
        }
    </RadzenMenuItem>;
        }
        else
        {
            return  @<RadzenMenuItem Text=@menuItem.Title Value=@menuItem Click=@OnMenuItemClick />;
        }
    }
}
