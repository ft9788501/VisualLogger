<# //TT generate can not run at build time, this is a know issue:https://github.com/mono/t4/issues/47 #>
<# //Pre-build event:"$(DevEnvDir)TextTransform.exe" "$(ProjectDir)I18NKeys.tt" #>
<#@ template language="C#" hostSpecific="true"#>
<#@ output extension=".cs" encoding="UTF-8" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="Newtonsoft.Json" #><# //There is a bug in System.Text.Json #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Microsoft.Extensions.DependencyInjection;
using VisualLogger.Localization;
<#
const string TAB = "    "; 
#>
namespace VisualLogger.Localization
{
    /// <summary>
    /// This is auto generate by I18nKeys.tt
    /// </summary>
    public static class I18nKeys
    {
        private static II18nSource? _i18nSourceInternal;
        private static II18nSource I18nSourceInternal => _i18nSourceInternal ??= (Global.ServiceProvider?.GetService<II18nSource>() ?? II18nSource.Default);
<#
var nonLocalizationFilePath = this.Host.ResolvePath(@"non-localized.json");
var nonLocalizationFileContent = File.ReadAllText(nonLocalizationFilePath);
JObject? nonLocalizationFileArray = JsonConvert.DeserializeObject<JObject>(nonLocalizationFileContent);
WriteNonI18nProperties(nonLocalizationFileArray, TAB);
var localizationFilePath = this.Host.ResolvePath(@"SupportedCultures\en-US.json");
var localizationFileContent = File.ReadAllText(localizationFilePath);
JObject? localizationFileArray = JsonConvert.DeserializeObject<JObject>(localizationFileContent);
WriteI18nProperties(localizationFileArray, TAB);
#>
    }
}
<#
void WriteNonI18nProperties(JObject? jObject, string? tab, string? allKeys = null, string? preKey = null)
{
    if (jObject == null)
    {
        return;
    }
    if (!string.IsNullOrEmpty(preKey))
    {
        WriteLine($"{tab}public class {preKey}");
        WriteLine(tab + "{");
    }
    var lastTab = tab;
    tab += TAB;
    foreach (var item in jObject)
    {
        var newAllKeys = item.Key;
        if (!string.IsNullOrEmpty(allKeys))
        {
            newAllKeys = $"{allKeys}.{item.Key}";
        }
        if (item.Value is JObject obj)
        {
            WriteNonI18nProperties(obj, tab, newAllKeys, item.Key);
        }
        else 
        {
            var property = $"public static string {item.Key} => \"{item.Value}\";";
            WriteLine($"{tab}/// <summary>");
            WriteLine($"{tab}/// {item.Value}");
            WriteLine($"{tab}/// </summary>");
            WriteLine($"{tab}{property}");
        }
    }
    if (!string.IsNullOrEmpty(preKey))
    {
        WriteLine(lastTab + "}");
    }
}
void WriteI18nProperties(JObject? jObject, string? tab, string? allKeys = null, string? preKey = null)
{
    if (jObject == null)
    {
        return;
    }
    if (!string.IsNullOrEmpty(preKey))
    {
        WriteLine($"{tab}public class {preKey}");
        WriteLine(tab + "{");
    }
    var lastTab = tab;
    tab += TAB;
    foreach (var item in jObject)
    {
        var newAllKeys = item.Key;
        if (!string.IsNullOrEmpty(allKeys))
        {
            newAllKeys = $"{allKeys}.{item.Key}";
        }
        if (item.Value is JObject obj)
        {
            WriteI18nProperties(obj, tab, newAllKeys, item.Key);
        }
        else 
        {
            var property = $"public static string {item.Key} => I18nSourceInternal.GetValueByKey(\"{newAllKeys}\");";
            WriteLine($"{tab}/// <summary>");
            WriteLine($"{tab}/// {item.Value}");
            WriteLine($"{tab}/// </summary>");
            WriteLine($"{tab}{property}");
        }
    }
    if (!string.IsNullOrEmpty(preKey))
    {
        WriteLine(lastTab + "}");
    }
}
#>