@inject SearchService SearchService;

<MDialog Value="Dialog"
         ValueChanged="DialogChanged"
         MaxWidth="590">
    <MCard>
        <MToolbar Dark
                  Color="teal">
            <MToolbarTitle>State selection</MToolbarTitle>
            <MAutocomplete @bind-Value="_select"
                           Loading="_loading"
                           Items="_itemsFilter"
                           OnSearchInputUpdate="QuerySelections"
                           NoDataContent=null
                           Flat
                           Dense
                           Outlined
                           ItemValue="r=>r"
                           ItemText="r=>r"
                           HideDetails="true"
                           Label="Enter word to filter"
                           SoloInverted></MAutocomplete>
            <MButton Icon>
                <MIcon>mdi-dots-vertical</MIcon>
            </MButton>
        </MToolbar>
        <MList Dense>
            <MSubheader>REPORTS</MSubheader>
            <MListItemGroup @bind-Value="_selectedItem"
                            Color="primary">
                @foreach (var item in _items1)
                {
                    <MListItem>
                        <MListItemAction>
                            <MCheckbox Value="@item.Enbale"></MCheckbox>
                        </MListItemAction>
                        <MListItemIcon>
                            <MIcon>
                                @item.Icon
                            </MIcon>
                        </MListItemIcon>
                        <MListItemContent>
                            <MListItemTitle>@item.Text</MListItemTitle>
                        </MListItemContent>
                    </MListItem>
                }
            </MListItemGroup>
        </MList>
    </MCard>
</MDialog>


@code {
    [Parameter]
    public bool Dialog { get; set; }
    [Parameter]
    public EventCallback<bool> DialogChanged { get; set; }

    private bool _loading;
    private IList<string> _items = Enumerable.Range(0, 50000).Select(i => $"long long data:{i}").ToArray();
    private IList<string> _itemsFilter = new string[0];

    private string? _select;
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task QuerySelections(string v)
    {
        if (string.IsNullOrEmpty(v) || v == _select)
        {
            return;
        }

        _loading = true;

        _itemsFilter = _items.AsParallel()
        .Where(x => x.Contains(v))
        .Take(10)
        .ToList();

        _loading = false;
    }

    private StringNumber _selectedItem = 1;
    private Item[] _items1 = new Item[]
    {
       new Item { Text= "Real-Time", Icon= "mdi-clock" },
       new Item { Text= "Audience", Icon= "mdi-account" },
       new Item { Text= "Conversions", Icon= "mdi-flag" }
    };

    class Item
    {
        public bool Enbale { get; set; } = false;
        public string? Text { get; set; }
        public string? Icon { get; set; }
    }
}
